import java.util.*;
public List<Buddy> buddies;
	public Set<String> myWishList;
	
	public CommonCities(Set<String> myWishList,Map<String,Set<String>> friendWishList) {
		this.buddies = new ArrayList<>();
		this.myWishList = myWishList;
		for(String buddyName : friendWishList.keySet()) {
			Set<String> wishList= friendWishList.get(buddyName);
			Set<String> intersection = new HashSet<String>(wishList);
			intersection.retainAll(myWishList);
			int simliarity = intersection.size();
			if(simliarity >= myWishList.size()/2) {
				buddies.add(new Buddy(buddyName,simliarity,wishList));
			}
		}
	}
	
	public List<String> recommendCities(int k){
		List<String> res = new ArrayList<>();
		List<Buddy> candidiates = buddies;
		candidiates.sort((a,b)->b.similairty-a.similairty);
		int i = 0 ; 
		while(k>0&&i<candidiates.size()) {
			Set<String> diff = new HashSet<>(candidiates.get(i).wishList);
			diff.removeAll(myWishList);
			if(diff.size()<=k) {
				res.addAll(diff);
				k-=diff.size();
				i++;
			}
			else {
				Iterator<String> it = diff.iterator();
				while(k>0) {
					res.add(it.next());
					k--;
				}
			}
		}
		return res;
	}
	
	class Buddy implements Comparable<Buddy> {
		Set<String> wishList;
		String name;
		int similairty;
		public Buddy(String n,int similarity, Set<String> wishList) {
			this.name = n;
			this.similairty = similarity;
			this.wishList = wishList;
		}
		@Override
		public int compareTo(Buddy o) {
			// TODO Auto-generated method stub
			return o.similairty-this.similairty;
		}
	}


public class TravelBuddy{
	Set<Integer> myCityList;
	List<Buddy> buddyList;
	
	class Buddy  implements Comparable<Buddy>{
		Set<Integer> cityList;
		Double similarity;
		Set<Integer> recommandList=new HashSet<>();
		
		public Buddy(int[] list) {
			this.cityList = list2set(list);
			int same = 0;
			for(int city:cityList) {
				if(myCityList.contains(city)) {
					same++;
				}
				else {
					recommandList.add(city);
				}
			}
			this.similarity= same/(double) myCityList.size();
		}

		@Override
		public int compareTo(Buddy o) {
			// TODO Auto-generated method stub
			return Double.compare(this.similarity, o.similarity);
			
		}
	}

	public static HashSet<Integer> list2set(int[] wishlist) {
	    HashSet<Integer> set = new HashSet<>();
	    for (int city : wishlist) set.add(city);
	    return set;
	}
	
	public TravelBuddy(int[] myCityList, int[][] buddies) {
		this.myCityList = list2set(myCityList);
		this.buddyList = new ArrayList<>();
		for(int[] candidate:buddies) {
			Buddy candiBuddy = new Buddy(candidate);
			if(candiBuddy.similarity>0.5) {
				this.buddyList.add(candiBuddy);
			}
			
		}
	  //Collections.sort(this.buddyList,(a,b)->(int)(10*b.similarity-10*a.similarity));
	}
	
	public List<Integer> recommend(int k){
		List<Integer> recommandList = new ArrayList<>();
		HashSet<Integer> used = new HashSet<>();
		int count =0;
		for(Buddy buddy:this.buddyList) {
			for(int city:buddy.recommandList) {
				if(k==count) return recommandList;
				if(!used.contains(city)) {
					used.add(city);
					recommandList.add(city);
					count++;
				}
				
			}
		}
		return recommandList;
	}
	
	public static void main(String[] args) {
		TravelBuddy solution = new TravelBuddy(new int[]{1, 2, 3, 4, 5},
                new int[][]{
                        new int[]{3, 4, 6, 8, 10}, // 2
                        new int[]{1, 2, 4, 5, 8}, // 4
                        new int[]{1, 3, 6, 7, 9}, // 2
                        new int[]{1, 2, 4, 7, 11}, // 3
                        new int[]{1,2,3,5, 6, 7, 12, 13}  // 4
        });

        List<Integer> r1 = solution.recommend(10);
        List<Integer> r2 = solution.recommend(5);
        List<Integer> r3 = solution.recommend(2);

        System.out.println(r1);
        System.out.println(r2);
        System.out.println(r3);
        return;
    }




}
