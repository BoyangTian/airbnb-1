class Solution {
    int rows, cols;
    int[] dx = new int[]{1, -1, 0, 0};
    int[] dy = new int[]{0, 0, 1, -1};
    
   public int slidingPuzzle(int[][] board) {
         if (board == null || board.length == 0){
                  return 0;
          }
       
          rows = board.length;
          cols = board[0].length;

          String target = "123450";
          String start = convertToString(board);
          if (start.equals(target)) return 0;
          Queue<String> queue = new LinkedList<>();
       queue.add(start);
          Set<String> visited = new HashSet<>();
       visited.add(start);
       int step=0;
       while(!queue.isEmpty()){
           step++;
           
           int size = queue.size();
           for(int i = 0 ; i < size ; i++){
               String cur = queue.poll();
               int indexZero= cur.indexOf('0');
               int x = indexZero/cols;
               int y = indexZero%cols;
               for(int k = 0 ;k<4 ;k++){
                   int newX = x + dx[k];
                   int newY = y + dy[k];
                   // if valid, do a swap
                   if (newX >= 0 && newY >= 0 && newX < rows && newY < cols){
                       String updatedString = swap(cur,indexZero,newX * cols + newY);
                       if(updatedString.equals(target)) return step;
                       if(!visited.contains(updatedString)){
                           visited.add(updatedString);
                           queue.add(updatedString);
                       }
                   
                   }
               }
           }
       }
       return -1;
    }
    
   private String convertToString(int[][] board){
          StringBuilder sb = new StringBuilder();
          for (int[] i : board){
                  for (int j : i){
                          sb.append(j);
                  }
          }

          return sb.toString();
   }
    
   private String swap(String s, int i, int k){
          char[] array = s.toCharArray();
          char tmp = array[i];
          array[i] = array[k];
          array[k] = tmp;
          return new String(array);

   }
}