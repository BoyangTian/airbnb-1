import java.util.*;

class TrieNode{
	TrieNode[] children ;
	boolean isWord;
	public TrieNode() {
		this.children= new TrieNode[26];
	
	}
}

class Trie{
	TrieNode root;
	public Trie() {
		this.root=new TrieNode();
	}
	
	public void insert(String word) {
		TrieNode cur = this.root;
		for(char c:word.toCharArray()) {
			if(cur.children[c-'a']==null) {
				cur.children[c-'a']=new TrieNode();
			}
			cur = cur.children[c-'a'];
		}
		cur.isWord=true;
	}
	
	 public void delete(String s) {
		 TrieNode cur = this.root;
	        for(char c : s.toCharArray()) {
	            if(cur.children[c-'a'] == null) return;
	            cur = cur.children[c-'a'];
	        }
	        cur.isWord = false;
	    }

}
public class BoggleGame {
	public static ArrayList<String> boogle(char[][] board, String[] dict){
		int m = board.length ,n = board[0].length;
		Trie tire = new Trie();
		for(String word:dict) {
			tire.insert(word);
		}
		boolean[][] visited = new boolean[m][n];
		ArrayList<String> res = new ArrayList<>();
		ArrayList<String> cur = new ArrayList<>();
		
		findWords(board,visited,tire.root,res,cur,0,0);
		
		return res;
	}
	
	
	private static void findWords(char[][] board, boolean[][] visited, TrieNode trie, ArrayList<String> res,
			ArrayList<String> cur, int x, int y) {
		int m = board.length , n = board[0].length;
		for(int i = x ; i < m; i++) {
			for(int j = y ; j< n ;j++) {
				List<List<Integer>> nextWordIndex = new ArrayList<>();
				List<Integer> path = new ArrayList<>();
				generateWords(board,visited,trie,nextWordIndex,path,i,j);
				for(List<Integer> nextWord:nextWordIndex) {
					String word="";
					for(int pos:nextWord) {
						int row = pos/n;
						int col = pos%n;
						word+=board[row][col];
						visited[row][col]=true;
					}
					cur.add(word);
					if(cur.size()>res.size()) {
						res.clear();
						res.addAll(cur);
					}
					findWords(board,visited,trie,res,cur,i,j);
					for(int pos:nextWord) {
						int row = pos/n;
						int col = pos%n;
						visited[row][col]=false;
					}
					cur.remove(cur.size()-1);
				}
			}
			//y=0;
		}
		
	}
	static int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};

	private static void generateWords(char[][] board, boolean[][] visited, TrieNode trie,
			List<List<Integer>> res, List<Integer> path, int i, int j) {
		// TODO Auto-generated method stub
		if(i<0||j<0||i>=board.length||j>=board[0].length||visited[i][j]||trie.children[board[i][j]-'a']==null) return;
		trie = trie.children[board[i][j]-'a'];
		if(trie.isWord) {
			List<Integer> newPath = new ArrayList<>(path);
	        newPath.add(i * board[0].length + j);
			res.add(new ArrayList<>(newPath));
			return;
		}
		visited[i][j]=true;
		path.add(i*board[0].length+j);
		for(int[] dir:dirs) {
			generateWords(board,visited,trie,res,path,i+dir[0],j+dir[1]);
		}
		visited[i][j]=false;
		path.remove(path.size()-1);
	}

	public static void main(String[] args) {
		BoggleGame bg = new BoggleGame();
		char[][] board = {
                {'o', 'a', 't', 'h'},
                {'e', 't', 'a', 'e'},
                {'i', 'h', 'k', 'r'},
                {'i', 'f', 'l', 'v'}
        };
		String[] dict = {"oath","pea","eat","rain"};
		 ArrayList<String> res = bg.boogle(board, dict);
		 System.out.println(res);
	}
	
}
