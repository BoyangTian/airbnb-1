K-V stroe
The abstraction of a KV store is a giant hashtable/hashmap/dictionary.
The main reason we want to use a key-value cache is to reduce latency for accessing active data. Achieve an O(1) read/write performance on a fast and expensive media (like memory or SSD), instead of a traditional O(logn) read/write on a slow and cheap media (typically hard drive).

问了好多好多最后都超时了……写一下还记得的吧，也不知道自己答的是不是靠谱 也是先说不要想多机器的情况先设计单机版本，

内存快速存取且排序（说的跳表或treeset好像不太靠谱），内存满了dump到硬盘，dump的时候创建新表不block新进来的请求，内存存储对文件的index快速定位需要搜索的文件（忘了说boom filter了……），硬盘二分搜索，定期合并避免文件太多，更改删除元素直接append新元素，查询时先内存文件再倒时序查，多次更改删除后浪费空间-同一个key出现的文件数达到某一阈值后在下一次的非高峰时段进行文件合并每个key保留最近值。拓展到多机器，数据迁移一致性哈希，一致性哈希的查询表可以缓存在client端减轻master压力，上传文件时需要返回client完成信息-选择captain上传一由captain复制备份有一个备份传输完成则返回成功信息避免client等太久，保存不同replica的访问顺序避免复制完全结束前收到请求。

1.set
Set 操作的语义为设置某个键值对，即将一个键值对存储到系统当中。Set 操作的指令为：
set key value [ttl=0]。其中 key、value 都为二进制数组，ttl 为 int 整数，指明该键值对应存活的
毫秒值，默认为 0，即永久保存。

2. get
Get 操作的语义为获取某个键对应的值以及存活时间的毫秒值，并且如果键不存在，则返
回空。Get 操作的指令为：get key。其中 key 为二进制数组。

3.incr
Incr 是 increment 的缩写，即增加某个键对应的整数计数器的值。Incr 操作的指令为 incr key
[incremental = 1] [initValue=0] [ttl=0]。其中 key 为二进制数组，incremental 为要为计数器增加
的整数值，默认为 1；initValue 为计数器的初始值，默认为 0；ttl 为计数器存活的时间毫秒值，
默认为 0，即永久保存。另外计数器实际上在系统中对应了一个长度为 4 的二进制数组，如果
尝试为一个值长度不为 4 的键执行 incr 操作，那么系统将返回错误信息。

4.delete
Delete 操作是在系统中删除某个键指定的键值对。Delete 操作的指令为 delete key。其中
key 为二进制数组

5.stat 操作
Stat 是 statistics 的简写，系统将返回包含数据服务器信息的数组，其中每个数据服务器信
息对象包含了当前服务器的地址，权值，使用情况，以及其中所包含的 Region 情况。服务器
的权值为用户指定的整数值，会在主服务器进行负载均衡时使用。服务器的使用情况包括服
务器总的内存、当前剩余的内存以及 CPU 的使用率。由于 kvstore 基于分布式的文件系统，因
此这里并未统计真实文件系统的使用情况。用户可以通过 HDFS 的管理页面进行查看。



Region 数据文件中的键值项按照键的升序排列。因此为了提高键值项文件的查找效率，
持久化存储引擎在加载某个 Region 时，会首先遍历 Region 的数据文件并建立索引。每个索引
项中包含开始键、结束键、开始块编号、结束块编号，以及开始块偏移。


有一个反直觉的事情是，内存随机写甚至比硬盘的顺序读还要慢，磁盘随机写就更慢了，说明我们要避免随机写，最好设计成顺序写。因此好的KV存储引擎，都在尽量避免更新操作，把更新和删除操作转化为顺序写操作。LevelDB采用了一种SSTable的数据结构来达到这个目的。
SSTable(Sorted String Table)就是一组按照key排序好的 key-value对, key和value都是字节数组。SSTable既可以在内存中，也可以在硬盘中。SSTable底层使用LSM Tree(Log-Structured Merge Tree)来存放有序的key-value对。
LevelDB整体由如下几个组成部分，
MemTable。即内存中的SSTable，新数据会写入到这里，然后批量写入磁盘，以此提高写的吞吐量。
Log文件。写MemTable前会写Log文件，即用WAL(Write Ahead Log)方式记录日志，如果机器突然掉电，内存中的MemTable丢失了，还可以通过日志恢复数据。WAL日志是很多传统数据库例如MySQL采用的技术，详细解释可以参考数据库如何用 WAL 保证事务一致性？ - 知乎专栏。
Immutable MemTable。内存中的MemTable达到指定的大小后，将不再接收新数据，同时会有新的MemTable产生，新数据写入到这个新的MemTable里，Immutable MemTable随后会写入硬盘，变成一个SST文件。
SSTable文件。即硬盘上的SSTable，文件尾部追加了一块索引，记录key->offset，提高随机读的效率。SST文件为Level 0到Level N多层，每一层包含多个SST文件；单个SST文件容量随层次增加成倍增长；Level0的SST文件由Immutable MemTable直接Dump产生，其他Level的SST文件由其上一层的文件和本层文件归并产生。
Manifest文件。 Manifest文件中记录SST文件在不同Level的分布，单个SST文件的最大最小key，以及其他一些LevelDB需要的元信息。
Current文件。从上面的介绍可以看出，LevelDB启动时的首要任务就是找到当前的Manifest，而Manifest可能有多个。Current文件简单的记录了当前Manifest的文件名。


首先SST文件尾部的索引要放在内存中，这样读索引就不需要一次磁盘IO了
所有读要先查看MemTable，如果没有再查看内存中的索引
所有写操作只能写到MemTable, 因为SST文件不可修改
定期把Immutable MemTable写入硬盘，成为SSTable文件，同时新建一个MemTable会继续接收新来的写操作
定期对SSTable文件进行合并
由于硬盘上的SSTable文件是不可修改的，那怎么更新和删除数据呢？对于更新操作，追加一个新的key-value对到文件尾部，由于读SSTable文件是从前向后读的，所以新数据会最先被读到；对于删除操作，追加“墓碑”值(tombstone)，表示删除该key，在定期合并SSTable文件时丢弃这些key, 即可删除这些key。

Manifest文件记录各个SSTable各个文件的管理信息，比如该SST文件处于哪个Level，文件名称叫啥，最小key和最大key各自是多少，如下图所示，


Log文件
Log文件主要作用是系统发生故障时，能够保证不会丢失数据。因为在数据写入内存中的MemTable之前，会先写入Log文件，这样即使系统发生故障，MemTable中的数据没有来得及Dump到磁盘，LevelDB也可以根据log文件恢复内存中的MemTable，不会造成系统丢失数据。这个方式就叫做 WAL(Write Ahead Log)，很多传统数据库例如MySQL也使用了WAL技术来记录日志。
每个Log文件由多个block组成，每个block大小为32K，读取和写入以block为基本单位。下图所示的Log文件包含3个Block，

MemTable
MemTable 是内存中的数据结构，存储的内容跟硬盘上的SSTable一样，只是格式不一样。Immutable MemTable的内存结构和Memtable是完全一样的，区别仅仅在于它是只读的，而MemTable则是允许写入和读取的。当MemTable写入的数据占用内存到达指定大小，则自动转换为Immutable Memtable，等待Dump到磁盘中，系统会自动生成一个新的MemTable供写操作写入新数据，理解了MemTable，那么Immutable MemTable自然不在话下。
MemTable里的数据是按照key有序的，因此当插入新数据时，需要把这个key-value对插入到合适的位置上，以保持key有序性。MemTable底层的核心数据结构是一个跳表(Skip List)。跳表是红黑树的一种替代数据结构，具有更高的写入速度，而且实现起来更加简单，请参考跳表(Skip List)。
前面我们介绍了LevelDB的一些内存数据结构和文件，这里开始介绍一些动态操作，例如读取，写入，更新和删除数据，分层合并，错误恢复等操作。
添加、更新和删除数据
LevelDB写入新数据时，具体分为两个步骤：
将这个操作顺序追加到log文件末尾。尽管这是一个磁盘操作，但是文件的顺序写入效率还是跟高的，所以不会降低写入的速度
如果log文件写入成功，那么将这条key-value记录插入到内存中MemTable。
LevelDB更新一条记录时，并不会本地修改SST文件，而是会作为一条新数据写入MemTable，随后会写入SST文件，在SST文件合并过程中，新数据会处于文件尾部，而读取操作是从文件尾部倒着开始读的，所以新值一定会最先被读到。
LevelDB删除一条记录时，也不会修改SST文件，而是用一个特殊值(墓碑值，tombstone)作为value，将这个key-value对追加到SST文件尾部，在SST文件合并过程中，这种值的key都会被忽略掉。
核心思想就是把写操作转换为顺序追加，从而提高了写的效率。
读取数据
读操作使用了如下几个手段进行优化：
MemTable + SkipList
Binary Search(通过 manifest 文件)
页缓存
bloom filter
周期性分层合并